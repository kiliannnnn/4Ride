---
import Layout from "@/layouts/Main.astro";
import { supabase } from "@/lib/supabase";
import { getUserProfileById } from "@/lib/services/userProfileServices";
import { listVehicles, deleteVehicle } from "@/lib/services/vehiclesServices";
import { listVehiclesOwnerships } from "@/lib/services/vehiclesOwnershipServices";
import type { Tables } from '@/database.types';

const user = Astro.locals.sb_user;

// Get user profile
let userProfile = null;
if (user) {
  try {
    // Note: getUserProfileById expects a number, but user.id is a string
    // We'll need to handle this differently or update the service
    const profiles = await supabase.from('user_profile').select('*').eq('user_id', user.id).single();
    userProfile = profiles.data;
  } catch (error) {
    console.error('Error fetching user profile:', error);
  }
}

// Get user's vehicles
let userVehicles: Tables<'vehicles'>[] = [];
if (user) {
  try {
    const ownerships = await listVehiclesOwnerships();
    const userOwnerships = ownerships.filter(ownership => ownership.user_id === user.id);
    
    if (userOwnerships.length > 0) {
      const vehicleIds = userOwnerships.map(ownership => ownership.vehicle_id);
      const allVehicles = await listVehicles();
      userVehicles = allVehicles.filter(vehicle => vehicleIds.includes(vehicle.id));
    }
  } catch (error) {
    console.error('Error fetching user vehicles:', error);
  }
}

// Get user's prompt history
let promptHistory: Tables<'prompts_history'>[] = [];
if (user) {
  try {
    const { data, error } = await supabase
      .from('prompts_history')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (!error && data) {
      promptHistory = data;
    }
  } catch (error) {
    console.error('Error fetching prompt history:', error);
  }
}
---

<Layout title="Dashboard">
  <div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold mb-2">Welcome back, {userProfile?.username || user?.email}!</h1>
      <p class="text-gray-600">Manage your profile and vehicles</p>
    </div>

    <!-- Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <div class="stat bg-base-100 shadow rounded-lg">
        <div class="stat-title">Total Mileage</div>
        <div class="stat-value text-primary">{userProfile?.mileage || 0} km</div>
        <div class="stat-desc">Your total distance traveled</div>
      </div>
      
      <div class="stat bg-base-100 shadow rounded-lg">
        <div class="stat-title">Vehicles Owned</div>
        <div class="stat-value text-secondary">{userVehicles.length}</div>
        <div class="stat-desc">Number of vehicles in your garage</div>
      </div>
      
      <div class="stat bg-base-100 shadow rounded-lg">
        <div class="stat-title">AI Conversations</div>
        <div class="stat-value text-accent">{promptHistory.length}</div>
        <div class="stat-desc">Your recent AI interactions</div>
      </div>
    </div>

    <!-- Vehicles Section -->
    <div class="bg-base-100 shadow rounded-lg p-6 mb-8">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold">My Vehicles</h2>
        <button class="btn btn-primary" onclick="document.getElementById('add_vehicle_modal').showModal()">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
          </svg>
          Add Vehicle
        </button>
      </div>

      {userVehicles.length === 0 ? (
        <div class="text-center py-8">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-16 h-16 mx-auto text-gray-400 mb-4">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 18.75a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h6m-9 0H3.375a1.125 1.125 0 0 1-1.125-1.125V14.25m17.25 4.5a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h1.125c.621 0 1.129-.504 1.09-1.124a17.902 17.902 0 0 0-3.213-9.193 2.056 2.056 0 0 0-1.58-.86H14.25M16.5 18.75h-2.25m0-11.177v-.958c0-.568-.422-1.048-.987-1.106a48.554 48.554 0 0 0-10.026 0 1.106 1.106 0 0 0-.987 1.106v7.635m12-6.677v6.677m0 4.5v-4.5m0 0H9M12 9h.008v.008H12V9Z" />
          </svg>
          <h3 class="text-lg font-semibold mb-2">No vehicles yet</h3>
          <p class="text-gray-600 mb-4">Add your first vehicle to start tracking your rides</p>
          <button class="btn btn-primary" onclick="document.getElementById('add_vehicle_modal').showModal()">
            Add Your First Vehicle
          </button>
        </div>
      ) : (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {userVehicles.map((vehicle) => (
            <div class="card bg-base-200 shadow-xl">
              <div class="card-body">
                <div class="flex justify-between items-start">
                  <div>
                    <h3 class="card-title">{vehicle.brand} {vehicle.model}</h3>
                    <p class="text-sm text-gray-600">{vehicle.year}</p>
                  </div>
                  <div class="dropdown dropdown-end">
                    <div tabindex="0" role="button" class="btn btn-ghost btn-sm">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z" />
                      </svg>
                    </div>
                        <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                            <li><button data-vehicle-id={`${vehicle.id}`} data-vehicle-brand={`${vehicle.brand}`} data-vehicle-model={`${vehicle.model}`} data-vehicle-year={`${vehicle.year || ''}`} data-vehicle-engine={`${vehicle.engine_size || ''}`} data-vehicle-mileage={`${vehicle.mileage || ''}`} class="edit-vehicle-btn">Edit</button></li>
                            <li><button data-vehicle-id={`${vehicle.id}`} class="delete-vehicle-btn text-error">Delete</button></li>
                        </ul>
                  </div>
                </div>
                
                <div class="mt-4 space-y-2">
                  {vehicle.engine_size && (
                    <div class="flex justify-between">
                      <span class="text-sm text-gray-600">Engine:</span>
                      <span class="text-sm font-medium">{vehicle.engine_size}cc</span>
                    </div>
                  )}
                  {vehicle.mileage && (
                    <div class="flex justify-between">
                      <span class="text-sm text-gray-600">Mileage:</span>
                      <span class="text-sm font-medium">{vehicle.mileage} km</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>

    <!-- Prompt History Section -->
    <div class="bg-base-100 shadow rounded-lg p-6 mb-8">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold">AI Conversation History</h2>
        <a href="/" class="btn btn-outline">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
          </svg>
          New Conversation
        </a>
      </div>

      {promptHistory.length === 0 ? (
        <div class="text-center py-8">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-16 h-16 mx-auto text-gray-400 mb-4">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.625 12a3.375 3.375 0 1 1-6.75 0 3.375 3.375 0 0 1 6.75 0Zm0 0c0 1.482.602 2.827 1.575 3.812M8.625 12v6.75m0-6.75v-1.5c0-1.482.602-2.827 1.575-3.812M8.625 12H12m0 0c0 1.482.602 2.827 1.575 3.812M12 12v6.75m0-6.75v-1.5c0-1.482-.602-2.827-1.575-3.812M12 12H15.375m0 0c0 1.482.602 2.827 1.575 3.812M15.375 12v6.75m0-6.75v-1.5c0-1.482-.602-2.827-1.575-3.812M15.375 12H18.75" />
          </svg>
          <h3 class="text-lg font-semibold mb-2">No conversations yet</h3>
          <p class="text-gray-600 mb-4">Start a conversation with AI to see your history here</p>
          <a href="/" class="btn btn-primary">
            Start Your First Conversation
          </a>
        </div>
      ) : (
        <div class="space-y-4">
          {promptHistory.map((prompt) => (
            <div class="card bg-base-200 shadow-lg">
              <div class="card-body">
                <div class="flex justify-between items-start">
                  <div class="flex-1">
                    <div class="flex items-center gap-2 mb-2">
                      <span class="text-sm text-gray-500">
                        {new Date(prompt.created_at).toLocaleDateString()} at {new Date(prompt.created_at).toLocaleTimeString()}
                      </span>
                    </div>
                    <div class="space-y-2">
                      <div>
                        <h4 class="font-semibold text-sm text-gray-700 mb-1">Your Input:</h4>
                        <p class="text-sm bg-base-100 p-2 rounded">{prompt.user_input}</p>
                      </div>
                      {prompt.answer && (
                        <div>
                          <h4 class="font-semibold text-sm text-gray-700 mb-1">AI Response:</h4>
                          <p class="text-sm bg-base-100 p-2 rounded line-clamp-3">{prompt.answer}</p>
                        </div>
                      )}
                    </div>
                  </div>
                  <div class="dropdown dropdown-end">
                    <div tabindex="0" role="button" class="btn btn-ghost btn-sm">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z" />
                      </svg>
                    </div>
                    <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                      <li><button data-prompt-id={`${prompt.id}`} class="delete-prompt-btn text-error">Delete</button></li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  </div>

  <!-- Add Vehicle Modal -->
  <dialog id="add_vehicle_modal" class="modal">
    <div class="modal-box max-w-2xl">
      <div class="flex items-center gap-3 mb-6">
        <div class="bg-primary/10 p-2 rounded-full">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-primary">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 18.75a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h6m-9 0H3.375a1.125 1.125 0 0 1-1.125-1.125V14.25m17.25 4.5a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h1.125c.621 0 1.129-.504 1.09-1.124a17.902 17.902 0 0 0-3.213-9.193 2.056 2.056 0 0 0-1.58-.86H14.25M16.5 18.75h-2.25m0-11.177v-.958c0-.568-.422-1.048-.987-1.106a48.554 48.554 0 0 0-10.026 0 1.106 1.106 0 0 0-.987 1.106v7.635m12-6.677v6.677m0 4.5v-4.5m0 0H9M12 9h.008v.008H12V9Z" />
          </svg>
        </div>
        <h3 class="font-bold text-xl">Add New Vehicle</h3>
      </div>
      
      <form method="POST" action="/api/vehicles/create" class="space-y-4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="form-control">
            <label class="label">
              <span class="label-text font-medium">Brand *</span>
            </label>
            <select name="brand" class="select select-bordered w-full" required>
              <option value="">Select brand</option>
              <option value="Honda">Honda</option>
              <option value="Suzuki">Suzuki</option>
              <option value="Yamaha">Yamaha</option>
              <option value="Kawasaki">Kawasaki</option>
              <option value="Ducati">Ducati</option>
              <option value="Aprilia">Aprilia</option>
              <option value="BMW">BMW</option>
              <option value="Triumph">Triumph</option>
              <option value="Moto Guzzi">Moto Guzzi</option>
              <option value="KTM">KTM</option>
            </select>
          </div>
          
          <div class="form-control">
            <label class="label">
              <span class="label-text font-medium">Model *</span>
            </label>
            <input type="text" name="model" class="input input-bordered w-full" placeholder="e.g., CBR600RR" required />
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="form-control">
            <label class="label">
              <span class="label-text font-medium">Year</span>
            </label>
            <input type="number" name="year" class="input input-bordered w-full" placeholder="2020" min="1900" max={new Date().getFullYear()} />
          </div>
          
          <div class="form-control">
            <label class="label">
              <span class="label-text font-medium">Engine Size (cc)</span>
            </label>
            <input type="number" name="engine_size" class="input input-bordered w-full" placeholder="600" min="50" max="3000" />
          </div>
          
          <div class="form-control">
            <label class="label">
              <span class="label-text font-medium">Current Mileage (km)</span>
            </label>
            <input type="number" name="mileage" class="input input-bordered w-full" placeholder="15000" min="0" />
          </div>
        </div>
        
        <div class="modal-action pt-4">
          <button type="button" class="btn btn-ghost close-modal-btn" data-modal={`add_vehicle_modal`}>Cancel</button>
          <button type="submit" class="btn btn-primary">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
            </svg>
            Add Vehicle
          </button>
        </div>
      </form>
    </div>
    <form method="dialog" class="modal-backdrop">
      <button>close</button>
    </form>
  </dialog>

  <!-- Edit Vehicle Modal -->
  <dialog id="edit_vehicle_modal" class="modal">
    <div class="modal-box max-w-2xl">
      <div class="flex items-center gap-3 mb-6">
        <div class="bg-secondary/10 p-2 rounded-full">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-secondary">
            <path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" />
          </svg>
        </div>
        <h3 class="font-bold text-xl">Edit Vehicle</h3>
      </div>
      
      <form method="POST" action="/api/vehicles/update" class="space-y-4">
        <input type="hidden" name="vehicle_id" id="edit_vehicle_id" />
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="form-control">
            <label class="label">
              <span class="label-text font-medium">Brand *</span>
            </label>
            <select name="brand" id="edit_vehicle_brand" class="select select-bordered w-full" required>
              <option value="">Select brand</option>
              <option value="Honda">Honda</option>
              <option value="Suzuki">Suzuki</option>
              <option value="Yamaha">Yamaha</option>
              <option value="Kawasaki">Kawasaki</option>
              <option value="Ducati">Ducati</option>
              <option value="Aprilia">Aprilia</option>
              <option value="BMW">BMW</option>
              <option value="Triumph">Triumph</option>
              <option value="Moto Guzzi">Moto Guzzi</option>
              <option value="KTM">KTM</option>
            </select>
          </div>
          
          <div class="form-control">
            <label class="label">
              <span class="label-text font-medium">Model *</span>
            </label>
            <input type="text" name="model" id="edit_vehicle_model" class="input input-bordered w-full" placeholder="e.g., CBR600RR" required />
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="form-control">
            <label class="label">
              <span class="label-text font-medium">Year</span>
            </label>
            <input type="number" name="year" id="edit_vehicle_year" class="input input-bordered w-full" placeholder="2020" min="1900" max={new Date().getFullYear()} />
          </div>
          
          <div class="form-control">
            <label class="label">
              <span class="label-text font-medium">Engine Size (cc)</span>
            </label>
            <input type="number" name="engine_size" id="edit_vehicle_engine_size" class="input input-bordered w-full" placeholder="600" min="50" max="3000" />
          </div>
          
          <div class="form-control">
            <label class="label">
              <span class="label-text font-medium">Current Mileage (km)</span>
            </label>
            <input type="number" name="mileage" id="edit_vehicle_mileage" class="input input-bordered w-full" placeholder="15000" min="0" />
          </div>
        </div>
        
        <div class="modal-action pt-4">
          <button type="button" class="btn btn-ghost close-modal-btn" data-modal={`edit_vehicle_modal`}>Cancel</button>
          <button type="submit" class="btn btn-secondary">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
            </svg>
            Update Vehicle
          </button>
        </div>
      </form>
    </div>
    <form method="dialog" class="modal-backdrop">
      <button>close</button>
    </form>
  </dialog>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Edit vehicle button event listeners
      document.querySelectorAll('.edit-vehicle-btn').forEach((button: Element) => {
        button.addEventListener('click', function(this: Element) {
          const vehicleId = this.getAttribute('data-vehicle-id');
          const brand = this.getAttribute('data-vehicle-brand');
          const model = this.getAttribute('data-vehicle-model');
          const year = this.getAttribute('data-vehicle-year');
          const engineSize = this.getAttribute('data-vehicle-engine');
          const mileage = this.getAttribute('data-vehicle-mileage');
          
          // Populate the edit modal
          const idInput = document.getElementById('edit_vehicle_id') as HTMLInputElement;
          const brandSelect = document.getElementById('edit_vehicle_brand') as HTMLSelectElement;
          const modelInput = document.getElementById('edit_vehicle_model') as HTMLInputElement;
          const yearInput = document.getElementById('edit_vehicle_year') as HTMLInputElement;
          const engineInput = document.getElementById('edit_vehicle_engine_size') as HTMLInputElement;
          const mileageInput = document.getElementById('edit_vehicle_mileage') as HTMLInputElement;
          const modal = document.getElementById('edit_vehicle_modal') as HTMLDialogElement;
          
          if (idInput && brandSelect && modelInput && yearInput && engineInput && mileageInput && modal) {
            idInput.value = vehicleId || '';
            brandSelect.value = brand || '';
            modelInput.value = model || '';
            
            if (year && year !== 'null') {
              yearInput.value = year;
            }
            
            if (engineSize && engineSize !== 'null') {
              engineInput.value = engineSize;
            }
            
            if (mileage && mileage !== 'null') {
              mileageInput.value = mileage;
            }
            
            // Show the modal
            modal.showModal();
          }
        });
      });

      // Delete vehicle button event listeners
      document.querySelectorAll('.delete-vehicle-btn').forEach((button: Element) => {
        button.addEventListener('click', function(this: Element) {
          const vehicleId = this.getAttribute('data-vehicle-id');
          
          if (confirm('Are you sure you want to delete this vehicle?')) {
            fetch(`/api/vehicles/${vehicleId}`, {
              method: 'DELETE',
            }).then(response => {
              if (response.ok) {
                window.location.reload();
              } else {
                alert('Failed to delete vehicle');
              }
            });
          }
        });
      });

      // Delete prompt button event listeners
      document.querySelectorAll('.delete-prompt-btn').forEach((button: Element) => {
        button.addEventListener('click', function(this: Element) {
          const promptId = this.getAttribute('data-prompt-id');
          
          if (confirm('Are you sure you want to delete this conversation?')) {
            fetch(`/api/prompts/${promptId}`, {
              method: 'DELETE',
            }).then(response => {
              if (response.ok) {
                window.location.reload();
              } else {
                alert('Failed to delete conversation');
              }
            });
          }
        });
      });

      // Close modal button event listeners
      document.querySelectorAll('.close-modal-btn').forEach((button: Element) => {
        button.addEventListener('click', function(this: Element) {
          const modalId = this.getAttribute('data-modal');
          const modal = document.getElementById(modalId || '') as HTMLDialogElement;
          if (modal) {
            modal.close();
          }
        });
      });
    });
  </script>
</Layout>
